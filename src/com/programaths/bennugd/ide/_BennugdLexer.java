/* The following code was generated by JFlex 1.4.3 on 3/08/14 19:47 */

package com.programaths.bennugd.ide;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.programaths.bennugd.psi.BgdTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/08/14 19:47 from the specification file
 * <tt>D:/php/bennugd-ide/src/com/programaths/bennugd/ide/_BennugdLexer.flex</tt>
 */
public class _BennugdLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\0\1\7"+
    "\3\0\1\42\1\5\1\40\1\52\1\4\1\47\1\30\1\45\1\0"+
    "\1\3\12\22\1\0\1\53\1\44\1\36\1\43\2\0\32\23\1\37"+
    "\1\6\1\51\1\0\1\23\1\0\1\16\1\24\1\31\1\21\1\10"+
    "\1\13\1\25\1\56\1\12\1\23\1\27\1\11\1\17\1\26\1\32"+
    "\1\35\1\23\1\15\1\14\1\33\1\34\1\50\1\55\1\41\1\20"+
    "\1\54\1\0\1\46\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\11\5\1\6"+
    "\1\5\1\7\5\5\1\10\1\11\1\12\1\1\1\13"+
    "\1\14\1\15\1\1\1\16\1\17\1\20\1\21\1\5"+
    "\1\22\2\0\1\23\3\0\3\5\1\24\22\5\1\25"+
    "\3\5\1\26\1\27\1\30\1\31\1\5\1\0\1\23"+
    "\2\5\1\32\6\5\1\33\12\5\1\34\13\5\1\22"+
    "\1\35\1\36\1\5\1\37\3\5\1\40\2\5\1\41"+
    "\11\5\1\42\3\5\1\43\6\5\1\44\2\5\1\45"+
    "\6\5\1\46\1\5\1\47\1\50\1\51\2\5\1\52"+
    "\4\5\1\53\1\54\2\5\1\55\1\56\1\57\1\60"+
    "\1\61\2\5\1\62\3\5\1\63\1\64\1\5\1\65"+
    "\1\5\1\66\1\67\1\70\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\57\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\57\0\57\0\57\0\u040a\0\u0439\0\u0468\0\57\0\u0497"+
    "\0\57\0\57\0\57\0\57\0\u04c6\0\u04f5\0\u0524\0\274"+
    "\0\57\0\u0553\0\353\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u0234"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u0234\0\u098c\0\u09bb\0\u09ea\0\57\0\57"+
    "\0\57\0\57\0\u0a19\0\u0a48\0\353\0\u0a77\0\u0aa6\0\u0234"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0234\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0234\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0524\0\u0234\0\u0fca"+
    "\0\u0ff9\0\u0234\0\u1028\0\u1057\0\u1086\0\u0234\0\u10b5\0\u10e4"+
    "\0\u0234\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u0234\0\u12ba\0\u12e9\0\u1318\0\u0234\0\u1347"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u0234\0\u1461\0\u1490"+
    "\0\u0234\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u0234"+
    "\0\u15d9\0\u0234\0\u0234\0\u0234\0\u1608\0\u1637\0\u0234\0\u1666"+
    "\0\u1695\0\u16c4\0\u16f3\0\u0234\0\u0234\0\u1722\0\u1751\0\u0234"+
    "\0\u0234\0\u0234\0\u0234\0\u0234\0\u1780\0\u17af\0\u0234\0\u17de"+
    "\0\u180d\0\u183c\0\u0234\0\u0234\0\u186b\0\u0234\0\u189a\0\u0234"+
    "\0\u0234\0\u0234\0\u0234\0\u0234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\16\1\22\3\16\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\16\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\16\1\42\1\43\1\44"+
    "\1\16\1\45\1\16\60\0\2\3\57\0\1\46\1\47"+
    "\52\0\5\50\1\51\1\52\50\50\6\53\1\54\1\51"+
    "\47\53\10\0\1\16\1\55\14\16\1\56\1\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\1\16\1\57\3\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\3\16\1\60\3\16\1\61"+
    "\6\16\1\62\1\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\5\16\1\63\12\16\1\0"+
    "\1\16\1\64\1\16\1\65\1\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\2\16\1\66\15\16\1\0"+
    "\2\16\1\67\2\16\3\0\1\16\6\0\1\16\3\0"+
    "\1\16\1\70\1\16\10\0\1\71\17\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\2\16\1\72\15\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\1\73\17\16\1\0"+
    "\3\16\1\74\1\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\12\16\1\21\5\16\1\0\5\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\1\75\4\16"+
    "\1\76\12\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\6\16\1\77\11\16\1\0\1\16"+
    "\1\100\3\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\16\16\1\101\1\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\10\16\1\102\7\16"+
    "\1\0\1\16\1\103\3\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\16\16\1\104\1\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\5\16"+
    "\1\105\12\16\1\0\3\16\1\106\1\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\42\0\1\107\52\0\1\110"+
    "\56\0\1\111\66\0\1\112\20\0\20\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\2\16\1\113\2\46"+
    "\1\0\54\46\2\47\1\0\1\47\1\114\52\47\2\50"+
    "\1\0\54\50\6\53\1\54\1\115\47\53\10\0\2\16"+
    "\1\116\1\16\1\117\13\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\11\16\1\120\6\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\20\16\1\0\1\121\1\122\3\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\4\16"+
    "\1\123\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\1\124\4\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\6\16\1\125\11\16\1\0\1\16"+
    "\1\126\3\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\5\16\1\127\12\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\16\16\1\130\1\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\20\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\1\131\2\16\10\0\1\132\4\16\1\133\12\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\2\16\1\134\15\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\2\16"+
    "\1\135\1\16\1\136\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\1\137\17\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\14\16\1\140\3\16"+
    "\1\0\1\141\4\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\0\4\16\1\142\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\15\16\1\143\2\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\1\144\17\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\4\16\1\145\13\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\16\16\1\146\1\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\147\17\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\4\16\1\150\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\0\2\16\1\151\2\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\2\16\1\152"+
    "\15\16\1\0\1\16\1\153\3\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\14\16\1\154\3\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\2\16\1\155\15\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\2\47\1\0\1\156\1\114\52\47"+
    "\10\0\3\16\1\157\14\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\1\160\17\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\6\16\1\161\11\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\20\16\1\0\4\16\1\162"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\1\16\1\163\3\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\1\16\1\164\16\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\7\16"+
    "\1\165\10\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\7\16\1\166\10\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\1\167\4\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\1\170\17\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\4\16"+
    "\1\171\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\3\16\1\172\1\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\20\16\1\0\2\16\1\173"+
    "\2\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\3\16\1\174\1\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\175\17\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\1\16"+
    "\1\176\16\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\20\16\1\0\3\16\1\177\1\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\1\16"+
    "\1\200\16\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\2\16\1\201\15\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\6\16"+
    "\1\202\11\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\1\203\17\16\1\0\5\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\4\16\1\204"+
    "\13\16\1\0\2\16\1\205\2\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\20\16\1\0\5\16\3\0"+
    "\1\206\6\0\1\16\3\0\3\16\10\0\1\207\17\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\2\16\1\210\15\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\211\3\0\3\16\10\0\15\16"+
    "\1\212\2\16\1\0\1\213\4\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\16\1\214\16\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\1\16\1\215\16\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\2\16\1\116\15\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\1\16\1\216\16\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\5\16\1\217\12\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\3\16\1\220\1\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\221\17\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\2\16\1\222\2\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\20\16\1\0\1\16\1\223\3\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\1\224\4\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\0\1\225\4\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\5\16\1\226\12\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\6\16\1\227\11\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\11\16\1\221\6\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\15\16\1\230\2\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\6\16\1\231\11\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\16\16\1\232\1\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\17\16\1\233\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\20\16\1\0\2\16\1\234\2\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\2\16\1\235\15\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\2\16\1\236\15\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\16\1\237\16\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\6\16\1\240\11\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\5\16\1\241\12\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\3\16\10\0"+
    "\1\242\17\16\1\0\5\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\2\16\1\243\15\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\1\244"+
    "\17\16\1\0\5\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\0\2\16\1\245\2\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\11\16\1\246"+
    "\6\16\1\0\5\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\2\16\1\247\15\16\1\0\5\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\3\16\1\250"+
    "\14\16\1\0\5\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\0\2\16\1\251\2\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\20\16\1\0"+
    "\5\16\3\0\1\16\6\0\1\16\3\0\2\16\1\252"+
    "\10\0\16\16\1\253\1\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\2\16"+
    "\1\254\2\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\5\16\1\255\12\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\16\16\1\256\1\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\20\16\1\0\2\16\1\257\2\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\20\16\1\0\2\16"+
    "\1\260\2\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\6\16\1\261\11\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\4\16\1\262\13\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\20\16\1\0\1\263\4\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16\10\0\1\264\17\16\1\0\5\16"+
    "\3\0\1\16\6\0\1\16\3\0\3\16\10\0\20\16"+
    "\1\0\1\16\1\265\3\16\3\0\1\16\6\0\1\16"+
    "\3\0\3\16\10\0\1\266\17\16\1\0\5\16\3\0"+
    "\1\16\6\0\1\16\3\0\3\16\10\0\20\16\1\0"+
    "\3\16\1\267\1\16\3\0\1\16\6\0\1\16\3\0"+
    "\3\16\10\0\1\270\17\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\7\16\1\271\10\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\4\16\1\272\13\16\1\0\5\16\3\0\1\16"+
    "\6\0\1\16\3\0\3\16\10\0\16\16\1\273\1\16"+
    "\1\0\5\16\3\0\1\16\6\0\1\16\3\0\3\16"+
    "\10\0\1\274\17\16\1\0\5\16\3\0\1\16\6\0"+
    "\1\16\3\0\3\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\15\1\1\11\5\1\3\11"+
    "\3\1\1\11\1\1\4\11\2\1\2\0\1\11\3\0"+
    "\32\1\4\11\1\1\1\0\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _BennugdLexer() {
    this((java.io.Reader)null);
  }


  public _BennugdLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _BennugdLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return IF;
          }
        case 59: break;
        case 57: 
          { return FUNCTION;
          }
        case 60: break;
        case 26: 
          { return END;
          }
        case 61: break;
        case 11: 
          { return OP_GT;
          }
        case 62: break;
        case 14: 
          { return OP_PLUS;
          }
        case 63: break;
        case 55: 
          { return PROGRAM;
          }
        case 64: break;
        case 38: 
          { return DEBUG;
          }
        case 65: break;
        case 33: 
          { return STEP;
          }
        case 66: break;
        case 49: 
          { return REPEAT;
          }
        case 67: break;
        case 6: 
          { return NUMBER;
          }
        case 68: break;
        case 10: 
          { return LPAR;
          }
        case 69: break;
        case 47: 
          { return SWITCH;
          }
        case 70: break;
        case 35: 
          { return TYPE;
          }
        case 71: break;
        case 53: 
          { return DECLARE;
          }
        case 72: break;
        case 15: 
          { return RBRACKET;
          }
        case 73: break;
        case 39: 
          { return BEGIN;
          }
        case 74: break;
        case 23: 
          { return OP_GTE;
          }
        case 75: break;
        case 7: 
          { return COMMA;
          }
        case 76: break;
        case 58: 
          { return CONTINUE;
          }
        case 77: break;
        case 18: 
          { return COMMENT;
          }
        case 78: break;
        case 54: 
          { return PRIVATE;
          }
        case 79: break;
        case 17: 
          { return SEMI;
          }
        case 80: break;
        case 24: 
          { return OP_LTE;
          }
        case 81: break;
        case 4: 
          { return OP_MUL;
          }
        case 82: break;
        case 13: 
          { return OP_MINUS;
          }
        case 83: break;
        case 44: 
          { return IMPORT;
          }
        case 84: break;
        case 45: 
          { return SIZEOF;
          }
        case 85: break;
        case 29: 
          { return ELIF;
          }
        case 86: break;
        case 52: 
          { return INCLUDE;
          }
        case 87: break;
        case 12: 
          { return OP_LT;
          }
        case 88: break;
        case 16: 
          { return RPAR;
          }
        case 89: break;
        case 42: 
          { return UNTIL;
          }
        case 90: break;
        case 5: 
          { return ID;
          }
        case 91: break;
        case 36: 
          { return LOCAL;
          }
        case 92: break;
        case 30: 
          { return ELSE;
          }
        case 93: break;
        case 48: 
          { return RETURN;
          }
        case 94: break;
        case 43: 
          { return WHILE;
          }
        case 95: break;
        case 34: 
          { return CASE;
          }
        case 96: break;
        case 9: 
          { return LBRACKET;
          }
        case 97: break;
        case 32: 
          { return FROM;
          }
        case 98: break;
        case 46: 
          { return STRUCT;
          }
        case 99: break;
        case 50: 
          { return ONEXIT;
          }
        case 100: break;
        case 21: 
          { return TO;
          }
        case 101: break;
        case 19: 
          { return STRING;
          }
        case 102: break;
        case 51: 
          { return PUBLIC;
          }
        case 103: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 104: break;
        case 37: 
          { return FRAME;
          }
        case 105: break;
        case 3: 
          { return OP_DIV;
          }
        case 106: break;
        case 27: 
          { return FOR;
          }
        case 107: break;
        case 40: 
          { return BREAK;
          }
        case 108: break;
        case 41: 
          { return CONST;
          }
        case 109: break;
        case 25: 
          { return OP_OR;
          }
        case 110: break;
        case 56: 
          { return PROCESS;
          }
        case 111: break;
        case 8: 
          { return EQ;
          }
        case 112: break;
        case 31: 
          { return LOOP;
          }
        case 113: break;
        case 22: 
          { return OP_AND;
          }
        case 114: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 28: 
          { return DUP;
          }
        case 116: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
